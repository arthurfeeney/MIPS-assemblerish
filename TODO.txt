

Little to do list :)
XXX means that it is done.

ShortTerm:
XXX     1. Fix beq and bne.
            - currently point to absolute address of the jump, not offset from
            the current index.
XXX     2. Fix la
            - got it backwards or something?
XXX     3. have it write to a file instead of just printing it out.
XXX     4. add support for all main mips commands.


        4.5 modify the conditionals so that they are a bit more readable.
            - use a static member variable instead of a namespace.
            - a bit harder than I thought it was going to be...
XXX    5. do a more comprehensive test. Make sure everything still works.
            - it probably does, but just make sure.
            - make extra sure la works and lui and ori work individually...
        6. make it a bit better at handling bad inputs.
            - add some simple error outputs.
            - assemble returns an int for error codes.
        7. support hexidecimal for immediates.
        8. refactor so that the command parts aren't ordered in the
           constructor. Just store the original string, and order things
           when to_binary is called?

Interpreter TODO:
    XXX 1. Be able to parse data segments.
        - think about how to do this...
        - make the current parser look for .data and put the stuff between that
            and the end of the data segment in some special variable.
            Perhaps a map<"something", vector<something>>.
        - pass data to the interpreter.
        - split .asciiz somehow...
        - think of a safer way to check if something is data other than
        - just checking if the line has a '.' in it.

    2. make it use a map of string to function
    so that I don't need to have ridiculous if/else if thing inside of my
    interpet function. mostly do this to make it look cleaner.

    make the map of registers use shared_ptr<int> instead of int*

    implement all of the commands
        - I don't think this be that bad actually.
        - move commands out of interpreter.cpp.
        - implement a syscall thing so I won't feel cheap when I print stuff
            out.

    add, addi, and the rest of the unsigned commands need to check for overflow

    Figure out how to save an address in a register... Or a work around so I
    don't need to! For jr and la and stuff.

Long Term:
    1. support for more pseudo commands.
    2. make it a lot better at handling bad inputs.
    3. turn into an interpreter (or use it in interpreter?) <- summer project?
        - more options for how it runs. 'run' and 's' commands.
            - run runs through the program.
            - s steps through the program showing the binary of each command.
